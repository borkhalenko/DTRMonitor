//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DtrClientCore.DtrServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DtrServiceRef.IFileTransferService")]
    public interface IFileTransferService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/hasNext", ReplyAction="http://tempuri.org/IFileTransferService/hasNextResponse")]
        bool hasNext();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/RemoveFileFromServer", ReplyAction="http://tempuri.org/IFileTransferService/RemoveFileFromServerResponse")]
        void RemoveFileFromServer(string fileName);
        
        // CODEGEN: Generating message contract since the operation ReceiveNextFromServer is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/ReceiveNextFromServer", ReplyAction="http://tempuri.org/IFileTransferService/ReceiveNextFromServerResponse")]
        DtrClientCore.DtrServiceRef.RemoteFileData ReceiveNextFromServer(DtrClientCore.DtrServiceRef.ReceiveNextFromServerRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileData) of message RemoteFileData does not match the default value (SendNextToServer)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferService/SendNextToServer", ReplyAction="http://tempuri.org/IFileTransferService/SendNextToServerResponse")]
        DtrClientCore.DtrServiceRef.RemoteFileHash SendNextToServer(DtrClientCore.DtrServiceRef.RemoteFileData request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReceiveNextFromServerRequest {
        
        public ReceiveNextFromServerRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileData {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string fileHash;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string fileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream fileByteStream;
        
        public RemoteFileData() {
        }
        
        public RemoteFileData(string fileHash, string fileName, long length, System.IO.Stream fileByteStream) {
            this.fileHash = fileHash;
            this.fileName = fileName;
            this.length = length;
            this.fileByteStream = fileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileHash", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileHash {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string fileHash;
        
        public RemoteFileHash() {
        }
        
        public RemoteFileHash(string fileHash) {
            this.fileHash = fileHash;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferServiceChannel : DtrClientCore.DtrServiceRef.IFileTransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferServiceClient : System.ServiceModel.ClientBase<DtrClientCore.DtrServiceRef.IFileTransferService>, DtrClientCore.DtrServiceRef.IFileTransferService {
        
        public FileTransferServiceClient() {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool hasNext() {
            return base.Channel.hasNext();
        }
        
        public void RemoveFileFromServer(string fileName) {
            base.Channel.RemoveFileFromServer(fileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DtrClientCore.DtrServiceRef.RemoteFileData DtrClientCore.DtrServiceRef.IFileTransferService.ReceiveNextFromServer(DtrClientCore.DtrServiceRef.ReceiveNextFromServerRequest request) {
            return base.Channel.ReceiveNextFromServer(request);
        }
        
        public string ReceiveNextFromServer(out string fileName, out long length, out System.IO.Stream fileByteStream) {
            DtrClientCore.DtrServiceRef.ReceiveNextFromServerRequest inValue = new DtrClientCore.DtrServiceRef.ReceiveNextFromServerRequest();
            DtrClientCore.DtrServiceRef.RemoteFileData retVal = ((DtrClientCore.DtrServiceRef.IFileTransferService)(this)).ReceiveNextFromServer(inValue);
            fileName = retVal.fileName;
            length = retVal.length;
            fileByteStream = retVal.fileByteStream;
            return retVal.fileHash;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DtrClientCore.DtrServiceRef.RemoteFileHash DtrClientCore.DtrServiceRef.IFileTransferService.SendNextToServer(DtrClientCore.DtrServiceRef.RemoteFileData request) {
            return base.Channel.SendNextToServer(request);
        }
        
        public void SendNextToServer(ref string fileHash, string fileName, long length, System.IO.Stream fileByteStream) {
            DtrClientCore.DtrServiceRef.RemoteFileData inValue = new DtrClientCore.DtrServiceRef.RemoteFileData();
            inValue.fileHash = fileHash;
            inValue.fileName = fileName;
            inValue.length = length;
            inValue.fileByteStream = fileByteStream;
            DtrClientCore.DtrServiceRef.RemoteFileHash retVal = ((DtrClientCore.DtrServiceRef.IFileTransferService)(this)).SendNextToServer(inValue);
            fileHash = retVal.fileHash;
        }
    }
}
